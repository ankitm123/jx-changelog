.TH "JX-CHANGELOG\-CREATE" "1" "" "Auto generated by spf13/cobra" "" 
.nh
.ad l


.SH NAME
.PP
jx\-changelog\-create \- Creates a changelog for a git tag


.SH SYNOPSIS
.PP
\fBjx\-changelog create\fP


.SH DESCRIPTION
.PP
Creates a Changelog for the latest tag

.PP
This command will generate a Changelog as markdown for the git commit range given. If you are using GitHub it will also update the GitHub Release with the changelog. You can disable that by passing'\-\-update\-release=false'

.PP
If you have just created a git tag this command will try default to the changes between the last tag and the previous one. You can always specify the exact Git references (tag/sha) directly via '\-\-previous\-rev' and '\-\-rev'

.PP
The changelog is generated by parsing the git commits. It will also detect any text like 'fixes #123' to link to issue fixes. You can also use Conventional Commits notation: 
\[la]https://conventionalcommits.org/\[ra] to get a nicer formatted changelog. e.g. using commits like 'fix:(my feature) this my fix' or 'feat:(cheese) something'

.PP
This command also generates a Release Custom Resource Definition you can include in your helm chart to give metadata about the changelog of the application along with metadata about the release (git tag, url, commits, issues fixed etc). Including this metadata in a helm charts means we can do things like automatically comment on issues when they hit Staging or Production; or give detailed descriptions of what things have changed when using GitOps to update versions in an environment by referencing the fixed issues in the Pull Request.

.PP
You can opt out of the release YAML generation via the '\-\-generate\-yaml=false' option

.PP
To update the release notes on your git provider needs a git API token which is usually provided via the Tekton git authentication mechanism.

.PP
Apart from using your git provider as the issue tracker there is also support for Jira. You then specify issues in commit messages with the issue key that looks like ABC\-123. You can configure this in in similar ways as environments, see 
\[la]https://jenkins-x.io/v3/develop/environments/config/\[ra]\&. An example configuration:

.PP
issueProvider:
    jira:
      serverUrl: 
\[la]https://example.atlassian.net\[ra]
      userName: user@example.com

.PP
Jira API token is taken from the environment variable JIRA\_API\_TOKEN. Can be populated using the jx\-boot\-job\-env\-vars secret.

.PP
By default jx commands look for a file '\~/.jx/gitAuth.yaml' to find the API tokens for Git servers. You can use 'jx create git token' to create a Git token.

.PP
Alternatively if you are running this command inside a CI server you can use environment variables to specify the username and API token.
e.g. define environment variables GIT\_USERNAME and GIT\_API\_TOKEN


.SH OPTIONS
.PP
\fB\-b\fP, \fB\-\-batch\-mode\fP[=false]
    Runs in batch mode without prompting for user input

.PP
\fB\-\-build\fP=""
    The Build number which is used to update the PipelineActivity. If not specified its defaulted from  the '$BUILD\_NUMBER' environment variable

.PP
\fB\-\-changelog\-separator\fP=""
    the separator to use when splitting commit message from changelog in the pull request body. Default to \-\-\-\-\- or if set the CHANGELOG\_SEPARATOR environment variable

.PP
\fB\-\-conditional\-release\fP[=true]
    Wrap the Release YAML in the helm Capabilities.APIVersions.Has if statement

.PP
\fB\-c\fP, \fB\-\-crd\fP[=false]
    Generate the CRD in the chart

.PP
\fB\-\-crd\-yaml\-file\fP="release\-crd.yaml"
    the name of the file to generate the Release CustomResourceDefinition YAML

.PP
\fB\-\-dir\fP="."
    the directory to search for the .git to discover the git source URL

.PP
\fB\-\-draft\fP[=false]
    The git provider release is marked as draft

.PP
\fB\-e\fP, \fB\-\-exclude\-regexp\fP=""
    Regexp for excluding commit messages

.PP
\fB\-\-fail\-if\-no\-commits\fP[=false]
    Do we want to fail the build if we don't find any commits to generate the changelog

.PP
\fB\-\-footer\fP=""
    The changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: 
\[la]https://golang.org/pkg/text/template/\[ra]

.PP
\fB\-\-footer\-file\fP=""
    The file name of the changelog footer in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: 
\[la]https://golang.org/pkg/text/template/\[ra]

.PP
\fB\-y\fP, \fB\-\-generate\-yaml\fP[=false]
    Generate the Release YAML in the local helm chart

.PP
\fB\-\-git\-kind\fP=""
    the kind of git server to connect to

.PP
\fB\-\-git\-server\fP=""
    the git server URL to create the git provider client. If not specified its defaulted from the current source URL

.PP
\fB\-\-git\-token\fP=""
    the git token used to operate on the git repository

.PP
\fB\-\-header\fP=""
    The changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: 
\[la]https://golang.org/pkg/text/template/\[ra]

.PP
\fB\-\-header\-file\fP=""
    The file name of the changelog header in markdown for the changelog. Can use go template expressions on the ReleaseSpec object: 
\[la]https://golang.org/pkg/text/template/\[ra]

.PP
\fB\-h\fP, \fB\-\-help\fP[=false]
    help for create

.PP
\fB\-\-include\-changelog\fP[=true]
    Should changelogs from pull requests be included. Defaults to true

.PP
\fB\-\-include\-merge\-commits\fP[=false]
    Include merge commits when generating the changelog

.PP
\fB\-\-log\-level\fP=""
    Sets the logging level. If not specified defaults to $JX\_LOG\_LEVEL

.PP
\fB\-\-no\-dev\-release\fP[=false]
    Disables the generation of Release CRDs in the development namespace to track releases being performed

.PP
\fB\-\-output\-markdown\fP=""
    Put the changelog output in this file

.PP
\fB\-o\fP, \fB\-\-overwrite\fP[=false]
    overwrites the Release CRD YAML file if it exists

.PP
\fB\-\-prerelease\fP[=false]
    The git provider release is marked as a pre\-release

.PP
\fB\-\-previous\-date\fP=""
    the previous date to find a revision in format 'MonthName dayNumber year'

.PP
\fB\-p\fP, \fB\-\-previous\-rev\fP=""
    the previous tag revision

.PP
\fB\-\-release\-yaml\-file\fP="release.yaml"
    the name of the file to generate the Release YAML

.PP
\fB\-\-rev\fP=""
    the current tag revision

.PP
\fB\-\-status\-path\fP="docs/releases.yaml"
    The path to the deployment status file used to calculate dependency updates. Defaults to docs/releases.yaml

.PP
\fB\-\-tag\-prefix\fP=""
    prefix to filter on when searching for version tags

.PP
\fB\-t\fP, \fB\-\-templates\-dir\fP=""
    the directory containing the helm chart templates to generate the resources

.PP
\fB\-\-update\-release\fP[=true]
    Should we update the release on the Git repository with the changelog

.PP
\fB\-\-verbose\fP[=false]
    Enables verbose output. The environment variable JX\_LOG\_LEVEL has precedence over this flag and allows setting the logging level to any value of: panic, fatal, error, warn, info, debug, trace

.PP
\fB\-v\fP, \fB\-\-version\fP=""
    The version to release


.SH EXAMPLE
.PP
# generate a changelog on the current source
  jx\-changelog create

.PP
# specify the version to use
  jx\-changelog create \-\-version 1.2.3

.PP
# specify the version and a header template
  jx\-changelog create \-\-header\-file docs/dev/changelog\-header.md \-\-version 1.2.3


.SH SEE ALSO
.PP
\fBjx\-changelog(1)\fP


.SH HISTORY
.PP
Auto generated by spf13/cobra
